const translate_document = {
  ru: {
    header_title: "–û–ø–∏—à–∏  —Ç–≤–æ–∏  —á—É–≤—Å—Ç–≤–∞ ü§é",
    button_language: "’Ä’°’µ’∏÷Å ’¨’•’¶’∏÷Ç",
    description_first: "–ü—Ä–∏–≤–µ—Ç, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—à—å —ç—Ç–æ—Ç –¥–µ–Ω—å —Å –Ω–∞–º–∏!",
    description_last:
      "–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç—É –æ—Å–æ–±–µ–Ω–Ω—É—é –º–∏–Ω—É—Ç—É. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–∏–¥–∏–º —Ç–æ–ª—å–∫–æ –º—ã. –ù–∏–∂–µ —Ç—ã —É–≤–∏–¥–∏—à—å —Ñ–æ—Ä–º—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–∏—Å–∞—Ç—å —Ç–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ–ª–µ.",
    label_name: "–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é",
    label_desire: "–û–ø–∏—à–∏ —Ç–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤ —ç—Ç—É –º–∏–Ω—É—Ç—É",
    button_submit: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
    success_message: "–∂–µ–ª–∞–µ–º —Ç–µ–±–µ —Ö–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞! üòä",
  },
  hy: {
    header_title: "’Ü’Ø’°÷Ä’°’£÷Ä’´÷Ä ÷Ñ’∏ ’¶’£’°÷Å’¥’∏÷Ç’∂÷Ñ’∂’•÷Ä’® ü§é",
    button_language: "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    description_first:
      "‘≤’°÷Ä÷á, ’∑’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂, ’∏÷Ä ’°’µ’Ω ÷Ö÷Ä’® ’¥’•’¶ ’∞’•’ø ’•’Ω ’°’∂÷Å’Ø’°÷Å’∂’∏÷Ç’¥!",
    description_last:
      "‘±’µ’Ω ’ß’ª’∏÷Ç’¥ ’Ø’°÷Ä’∏’≤ ’•’Ω ’∂’Ø’°÷Ä’°’£÷Ä’•’¨, ’´’∂’π ’•’Ω ’¶’£’∏÷Ç’¥ ’°’µ’Ω ’∞’°’ø’∏÷Ç’Ø ’∫’°’∞’´’∂÷â ‘±’µ’Ω ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’¥’´’°’µ’∂ ’¥’•’∂÷Ñ ’Ø’ø’•’Ω’∂’•’∂÷Ñ÷â ’Ü’•÷Ä÷Ñ÷á’∏÷Ç’¥ ’Ø’ø’•’Ω’∂’•’Ω ’±÷á, ’∏÷Ä’ø’•’≤ ’∫’•’ø÷Ñ ’ß ’∂’∑’•’¨ ÷Ñ’∏ ’°’∂’∏÷Ç’∂’® ÷á ’°’¶’£’°’∂’∏÷Ç’∂’®, ’°’µ’∂’∏÷Ç’∞’•’ø÷á ’£÷Ä’•’¨ ÷Ñ’∏ ’¶’£’°÷Å’¥’∏÷Ç’∂÷Ñ’∂’•÷Ä’® ’°’º’°’∂’±’´’∂ ’§’°’∑’ø’∏÷Ç’¥÷â",
    label_name: "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’±’•÷Ä ’°’∂’∏÷Ç’∂’∂ ’∏÷Ç ’°’¶’£’°’∂’∏÷Ç’∂’®",
    label_desire: "’Ü’Ø’°÷Ä’°’£÷Ä’´÷Ä ÷Ñ’∏ ’¶’£’°÷Å’¥’∏÷Ç’∂÷Ñ’∂’•÷Ä’® ’°’µ’Ω ’∫’°’∞’´’∂",
    button_submit: "’à÷Ç’≤’°÷Ä’Ø’•’¨",
    success_message: "÷Å’°’∂’Ø’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ÷Ñ’•’¶ ’¨’°’æ ’•÷Ä’•’Ø’∏! üòä",
  },
};

document.addEventListener("DOMContentLoaded", () => {
  let current_language = "ru";

  document.getElementById("button_language").addEventListener("click", () => {
    if (current_language === 'ru') {
        current_language = 'hy'
    } else {
        current_language = 'ru'
    }
    updateLanguage();
    
  });

  function updateLanguage() {
    document.querySelectorAll("[data-i18n]").forEach((element) => {
        const key = element.getAttribute("data-i18n");
        element.textContent = translate_document[current_language] [key]
    })
  };


  const name_input = document.getElementById("name");
  const desire_input = document.getElementById("desire");

  name_input.addEventListener("change", (event) => {
    const value = event.target.value;
    localStorage.setItem("name", value);
  });

  desire_input.addEventListener("change", (event) => {
    const value = event.target.value;
    localStorage.setItem("desire", value);
  });

  const local_name = localStorage.getItem("name");
  const local_desire = localStorage.getItem("desire");

  if (local_name) {
    name_input.value = local_name;
  }

  if (local_desire) {
    desire_input.value = local_desire;
  }

  const form = document.querySelector(".form");

  form.addEventListener("submit", async (event) => {
    event.preventDefault();

    const name = name_input.value.trim();
    const desire = desire_input.value.trim();

    if (!name || !desire) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –æ–±–∞ –ø–æ–ª—è!");
      return;
    }

    try {
      const response = await fetch("/submit", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ name, desire }),
      });

      if (true) {
        const main = document.querySelector("main");
        main.innerHTML = "";

        const success = document.createElement("div");
        const succesText = document.createElement("h1");

        succesText.dataset.i18n = "success_message";
        succesText.textContent = `${name}, –∂–µ–ª–∞–µ–º —Ç–µ–±–µ —Ö–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞! üòä`;

        success.appendChild(succesText);
        main.appendChild(success);

        localStorage.clear();
      } else {
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:", error);
      alert("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.");
    }
  });
});
